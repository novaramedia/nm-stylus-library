#!/usr/bin/env node
/**
 * Build Variables Script
 * 
 * This script reads from variables.json (single source of truth)
 * and generates both:
 * - variables.styl (for Stylus usage)
 * - variables.js (for JavaScript usage)
 */

const fs = require('fs');
const path = require('path');

const VARIABLES_JSON_PATH = path.join(__dirname, '../variables.json');
const VARIABLES_STYL_PATH = path.join(__dirname, '../variables.styl');
const VARIABLES_JS_PATH = path.join(__dirname, '../variables.js');

// Convert camelCase to kebab-case for CSS custom properties
function camelToKebab(str) {
  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();
}

// Generate Stylus file content
function generateStylusContent(variables) {
  let content = '';
  
  // First, add Stylus variables for breakpoints
  content += '// Breakpoint variables\n';
  Object.entries(variables.breakpoints).forEach(([key, value]) => {
    content += `$breakpoint-${key} = ${value}\n`;
  });
  content += '\n';

  // Add golden ratio constant
  content += '// Constants\n';
  content += `$golden-ratio = ${variables.constants.goldenRatio}\n\n`;

  // Then add CSS custom properties in html block
  content += 'html\n';
  
  // Layout variables
  content += '  // layout\n';
  Object.entries(variables.layout).forEach(([key, value]) => {
    const cssVar = camelToKebab(key);
    content += `  --${cssVar}: ${value}\n`;
  });

  // Color variables
  content += '  // colors\n';
  Object.entries(variables.colors).forEach(([key, value]) => {
    const cssVar = camelToKebab(key);
    content += `  --color-${cssVar}: ${value}\n`;
  });

  // Typography variables
  content += '  // typography\n';
  Object.entries(variables.typography).forEach(([key, value]) => {
    const cssVar = camelToKebab(key);
    content += `  --${cssVar}: ${value}\n`;
  });

  // Transition variables
  content += '  // transitions\n';
  Object.entries(variables.transitions).forEach(([key, value]) => {
    const cssVar = camelToKebab(key);
    content += `  --transition-${cssVar}: ${value}\n`;
  });

  // Breakpoints as CSS custom properties (derived from Stylus vars)
  content += '  // breakpoints (derived from Stylus vars)\n';
  Object.entries(variables.breakpoints).forEach(([key, value]) => {
    content += `  --breakpoint-${key} = $breakpoint-${key}\n`;
  });

  return content;
}

// Generate JavaScript file content
function generateJavaScriptContent(variables) {
  let content = '/**\n * Design System Variables\n * \n * This file is auto-generated from variables.json\n * Do not edit this file directly - edit variables.json instead\n * and run "npm run build:variables" to regenerate.\n */\n\n';
  
  // Create a flat structure for easy access
  content += 'export const variables = {\n';
  content += '  // Breakpoints\n';
  content += '  breakpoints: {\n';
  Object.entries(variables.breakpoints).forEach(([key, value]) => {
    content += `    ${key}: '${value}',\n`;
  });
  content += '  },\n\n';

  content += '  // Layout\n';
  content += '  layout: {\n';
  Object.entries(variables.layout).forEach(([key, value]) => {
    content += `    ${key}: '${value}',\n`;
  });
  content += '  },\n\n';

  content += '  // Colors\n';
  content += '  colors: {\n';
  Object.entries(variables.colors).forEach(([key, value]) => {
    content += `    ${key}: '${value}',\n`;
  });
  content += '  },\n\n';

  content += '  // Typography\n';
  content += '  typography: {\n';
  Object.entries(variables.typography).forEach(([key, value]) => {
    content += `    ${key}: '${value}',\n`;
  });
  content += '  },\n\n';

  content += '  // Transitions\n';
  content += '  transitions: {\n';
  Object.entries(variables.transitions).forEach(([key, value]) => {
    content += `    ${key}: '${value}',\n`;
  });
  content += '  },\n\n';

  content += '  // Constants\n';
  content += '  constants: {\n';
  Object.entries(variables.constants).forEach(([key, value]) => {
    content += `    ${key}: ${value},\n`;
  });
  content += '  }\n';
  content += '};\n\n';

  // Add convenient access to CSS custom property names
  content += '// CSS Custom Property Names (for use with getComputedStyle, etc.)\n';
  content += 'export const cssVariableNames = {\n';
  
  content += '  layout: {\n';
  Object.keys(variables.layout).forEach(key => {
    const cssVar = camelToKebab(key);
    content += `    ${key}: '--${cssVar}',\n`;
  });
  content += '  },\n\n';

  content += '  colors: {\n';
  Object.keys(variables.colors).forEach(key => {
    const cssVar = camelToKebab(key);
    content += `    ${key}: '--color-${cssVar}',\n`;
  });
  content += '  },\n\n';

  content += '  typography: {\n';
  Object.keys(variables.typography).forEach(key => {
    const cssVar = camelToKebab(key);
    content += `    ${key}: '--${cssVar}',\n`;
  });
  content += '  },\n\n';

  content += '  transitions: {\n';
  Object.keys(variables.transitions).forEach(key => {
    const cssVar = camelToKebab(key);
    content += `    ${key}: '--transition-${cssVar}',\n`;
  });
  content += '  },\n\n';

  content += '  breakpoints: {\n';
  Object.keys(variables.breakpoints).forEach(key => {
    content += `    ${key}: '--breakpoint-${key}',\n`;
  });
  content += '  }\n';
  content += '};\n\n';

  content += '// Default export for convenience\n';
  content += 'export default variables;\n';

  return content;
}

// Main function
function buildVariables() {
  try {
    // Read variables.json
    const variablesJson = fs.readFileSync(VARIABLES_JSON_PATH, 'utf8');
    const variables = JSON.parse(variablesJson);

    // Generate Stylus file
    const stylusContent = generateStylusContent(variables);
    fs.writeFileSync(VARIABLES_STYL_PATH, stylusContent);
    console.log('✅ Generated variables.styl');

    // Generate JavaScript file
    const jsContent = generateJavaScriptContent(variables);
    fs.writeFileSync(VARIABLES_JS_PATH, jsContent);
    console.log('✅ Generated variables.js');

    console.log('\n🎉 Variable synchronization complete!');
    console.log('📄 Source: variables.json');
    console.log('📄 Generated: variables.styl, variables.js');
  } catch (error) {
    console.error('❌ Error building variables:', error.message);
    process.exit(1);
  }
}

// Run the script if called directly
if (require.main === module) {
  buildVariables();
}

module.exports = { buildVariables };